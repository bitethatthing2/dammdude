import { createServerClient, type CookieOptions } from '@supabase/ssr';
import type { Database } from '../database.types';
import type { ReadonlyRequestCookies } from 'next/dist/server/web/spec-extension/adapters/request-cookies';
import { cookies as nextCookies } from 'next/headers';

/**
 * Alternative approach using cookie handler with direct synchronous access
 * to avoid the NextJS "cookies() should be awaited" issue
 */
export async function createSupabaseServerClient(cookieStore?: ReadonlyRequestCookies) {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
  
  if (!supabaseUrl || !supabaseAnonKey) {
    throw new Error('Missing Supabase URL or Anon Key');
  }
  
  // Use provided cookieStore or get a fresh one
  const cookies = cookieStore || nextCookies();
  
  // Create a cached map of cookie values to avoid repeated calls to cookies().get()
  const cookieCache = new Map<string, string | undefined>();

  // Initialize the cache with any values needed immediately
  try {
    const sbAuthToken = cookies.get('sb-dzvvjgmnlcmgrsnyfqnw-auth-token');
    if (sbAuthToken) {
      cookieCache.set('sb-dzvvjgmnlcmgrsnyfqnw-auth-token', sbAuthToken.value);
    }
    
    // Add other common auth cookie names with suffixes
    for (let i = 0; i <= 5; i++) {
      const tokenName = `sb-dzvvjgmnlcmgrsnyfqnw-auth-token.${i}`;
      const token = cookies.get(tokenName);
      if (token) {
        cookieCache.set(tokenName, token.value);
      }
    }
  } catch (error) {
    console.warn('Error pre-caching auth cookies:', error);
  }
  
  return createServerClient<Database>(supabaseUrl, supabaseAnonKey, {
    cookies: {
      get(name: string) {
        try {
          // First check our cache
          if (cookieCache.has(name)) {
            return cookieCache.get(name);
          }
          
          // If not in cache, get directly
          const cookie = cookies.get(name);
          const value = cookie?.value;
          
          // Cache for future use
          cookieCache.set(name, value);
          
          return value;
        } catch (error) {
          console.warn('Cookie get error:', name);
          return undefined;
        }
      },
      set(name: string, value: string, options: CookieOptions) {
        try {
          cookies.set({ name, value, ...options });
          // Update our cache
          cookieCache.set(name, value);
        } catch (error) {
          // This is normal in Server Components
        }
      },
      remove(name: string, options: CookieOptions) {
        try {
          cookies.set({ name, value: '', maxAge: 0, ...options });
          // Update our cache
          cookieCache.delete(name);
        } catch (error) {
          // This is normal in Server Components
        }
      }
    }
  });
}

// For backward compatibility
export const createClient = createSupabaseServerClient;